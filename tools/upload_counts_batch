#! /opt/iotuploader/bin/python3

import sys
sys.path.append("/opt/iotuploader/src/iot-uploader")
import json
import argparse
import datetime

from sqlalchemy import select

from dotenv import load_dotenv
load_dotenv("/opt/iotuploader/.iotenv")

from iotuploader.database import SessionLocal
from iotuploader.models import Upload, UploadCount, SensorData, Image

db = SessionLocal()

def get_upload_sensors(upload):
    sensor_names = set()

    if upload.data_type == 1:
        st = select(SensorData).where(SensorData.upload_id == upload.id).limit(1)
        sensor_data = db.scalars(st)
        for d in sensor_data:
            sensor_names.add(d.sensor_name)

    elif upload.data_type == 2:
        st = select(Image).where(Image.upload_id == upload.id)
        image = db.scalar(st)
        sensor_names.add(image.sensor_name)

    return list(sensor_names)


def get_count_data(date, hour):
    count_data = {}

    ts1 = "{} {:0=2}:00:00".format(date, hour)
    ts2 = "{} {:0=2}:59:59".format(date, hour)
    st = select(Upload).where(Upload.timestamp > ts1).where(Upload.timestamp < ts2)
    uploads = db.scalars(st)
    for upload in uploads:
        sensor_names = get_upload_sensors(upload)
        for s in sensor_names:
            count_data[s] = count_data.get(s, 0) + 1

    return count_data


def update_upload_counts(date, hour, count_data):
    for sensor_name in count_data:
        st = select(UploadCount)\
                .where(UploadCount.sensor_name == sensor_name)\
                .where(UploadCount.date == date)\
                .where(UploadCount.hour == hour)
        upload_count = db.scalar(st)

        if upload_count:
            upload_count.count = count_data[sensor_name]

        else:
            upload_count = UploadCount(
                sensor_name = sensor_name,
                date = date,
                hour = hour,
                count = count_data[sensor_name]
            )
            db.add(upload_count)

        db.commit()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("start")
    parser.add_argument("end", nargs="?", default=None)
    args = parser.parse_args()

    start = datetime.date.fromisoformat(args.start)

    end = start
    if args.end is not None:
        end = datetime.date.fromisoformat(args.end)

    if start > end:
        print(f"ERROR: {start} > {end}")
        sys.exit(-10)

    days = (end - start).days + 1
    for d in range(days):
        date = start + datetime.timedelta(days=d)
        print(date)

        for hour in range(24):
            count_data = get_count_data(date, hour)
            if count_data:
                print(f"  {hour} {count_data}")
                update_upload_counts(date, hour, count_data)


if __name__ == "__main__":
    main()

